import { Secp256k1, Ecdsa, keccakAndEcdsa, Message, ecdsa } from './ecdsa.js';
import assert from 'assert';

// create an example ecdsa signature

let privateKey = Secp256k1.Scalar.random();
let publicKey = Secp256k1.generator.scale(privateKey);

let messageBytes = new TextEncoder().encode('whats up');

let signature = Ecdsa.sign(messageBytes, privateKey.toBigInt());

// investigate the constraint system generated by ECDSA verify

console.time('ecdsa verify only (build constraint system)');
let csOnly = ecdsa.analyzeMethods().verifySignedHash;
console.timeEnd('ecdsa verify only (build constraint system)');
console.log(csOnly.summary());

console.time('keccak + ecdsa verify (build constraint system)');
let cs = keccakAndEcdsa.analyzeMethods().verify;
console.timeEnd('keccak + ecdsa verify (build constraint system)');
console.log(cs.summary());

// compile and prove

console.time('keccak + ecdsa verify (compile)');
await keccakAndEcdsa.compile();
console.timeEnd('keccak + ecdsa verify (compile)');

console.time('keccak + ecdsa verify (prove)');
let message = Message.from(messageBytes);
let proof = await keccakAndEcdsa.verify(message, signature, publicKey);
console.timeEnd('keccak + ecdsa verify (prove)');

proof.publicOutput.assertTrue('signature verifies');
assert(await keccakAndEcdsa.verify(proof), 'proof verifies');
